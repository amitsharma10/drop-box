{"version":3,"sources":["/Users/ashar61/work/projects/drop-box/node_modules/mime-types/index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["\nvar db = require('mime-db')\n\n// types[extension] = type\nexports.types = Object.create(null)\n// extensions[type] = [extensions]\nexports.extensions = Object.create(null)\n\nObject.keys(db).forEach(function (name) {\n  var mime = db[name]\n  var exts = mime.extensions\n  if (!exts || !exts.length) return\n  exports.extensions[name] = exts\n  exts.forEach(function (ext) {\n    exports.types[ext] = name\n  })\n})\n\nexports.lookup = function (string) {\n  if (!string || typeof string !== \"string\") return false\n  // remove any leading paths, though we should just use path.basename\n  string = string.replace(/.*[\\.\\/\\\\]/, '').toLowerCase()\n  if (!string) return false\n  return exports.types[string] || false\n}\n\nexports.extension = function (type) {\n  if (!type || typeof type !== \"string\") return false\n  // to do: use media-typer\n  type = type.match(/^\\s*([^;\\s]*)(?:;|\\s|$)/)\n  if (!type) return false\n  var exts = exports.extensions[type[1].toLowerCase()]\n  if (!exts || !exts.length) return false\n  return exts[0]\n}\n\n// type has to be an exact mime type\nexports.charset = function (type) {\n  var mime = db[type]\n  if (mime && mime.charset) return mime.charset\n\n  // default text/* to utf-8\n  if (/^text\\//.test(type)) return 'UTF-8'\n\n  return false\n}\n\n// backwards compatibility\nexports.charsets = {\n  lookup: exports.charset\n}\n\n// to do: maybe use set-type module or something\nexports.contentType = function (type) {\n  if (!type || typeof type !== \"string\") return false\n  if (!~type.indexOf('/')) type = exports.lookup(type)\n  if (!type) return false\n  if (!~type.indexOf('charset')) {\n    var charset = exports.charset(type)\n    if (charset) type += '; charset=' + charset.toLowerCase()\n  }\n  return type\n}\n"]}