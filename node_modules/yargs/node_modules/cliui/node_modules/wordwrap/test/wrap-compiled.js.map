{"version":3,"sources":["/Users/ashar61/work/projects/drop-box/node_modules/yargs/node_modules/cliui/node_modules/wordwrap/test/wrap.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;AAEnC,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,QAAQ,GAAG,EAAE,CAAC,YAAY,CAAC,SAAS,GAAG,eAAe,EAAE,MAAM,CAAC,CAAC;;AAEpE,OAAO,CAAC,MAAM,GAAG,YAAY;AACzB,QAAI,KAAK,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC/C,QAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;;AAElC,SAAK,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AAC1B,cAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,EAAE,mBAAmB,CAAC,CAAC;AAClD,YAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;AACvD,cAAM,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;KAC5D,CAAC,CAAC;CACN,CAAC;;AAEF,OAAO,CAAC,aAAa,GAAG,YAAY;AAChC,QAAI,KAAK,GAAG,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACpD,QAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;;AAElC,SAAK,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AAC1B,cAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,IAAI,GAAG,EAAE,oBAAoB,CAAC,CAAC;AACpD,YAAI,MAAM,GAAG,IAAI,CACZ,KAAK,CAAC,KAAK,CAAC,CACZ,MAAM,CAAC,UAAU,CAAC,EAAE;AAAE,mBAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;SAAE,CAAC,CACjD;AACD,cAAM,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;AACzD,cAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;KACpE,CAAC,CAAC;CACN,CAAC","file":"wrap-compiled.js","sourcesContent":["var assert = require('assert');\nvar wordwrap = require('wordwrap');\n\nvar fs = require('fs');\nvar idleness = fs.readFileSync(__dirname + '/idleness.txt', 'utf8');\n\nexports.stop80 = function () {\n    var lines = wordwrap(80)(idleness).split(/\\n/);\n    var words = idleness.split(/\\s+/);\n    \n    lines.forEach(function (line) {\n        assert.ok(line.length <= 80, 'line > 80 columns');\n        var chunks = line.match(/\\S/) ? line.split(/\\s+/) : [];\n        assert.deepEqual(chunks, words.splice(0, chunks.length));\n    });\n};\n\nexports.start20stop60 = function () {\n    var lines = wordwrap(20, 100)(idleness).split(/\\n/);\n    var words = idleness.split(/\\s+/);\n    \n    lines.forEach(function (line) {\n        assert.ok(line.length <= 100, 'line > 100 columns');\n        var chunks = line\n            .split(/\\s+/)\n            .filter(function (x) { return x.match(/\\S/) })\n        ;\n        assert.deepEqual(chunks, words.splice(0, chunks.length));\n        assert.deepEqual(line.slice(0, 20), new Array(20 + 1).join(' '));\n    });\n};\n"]}