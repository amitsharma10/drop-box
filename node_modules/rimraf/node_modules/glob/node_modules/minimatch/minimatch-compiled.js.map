{"version":3,"sources":["/Users/ashar61/work/projects/drop-box/node_modules/rimraf/node_modules/glob/node_modules/minimatch/minimatch.js"],"names":[],"mappings":"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","file":"minimatch-compiled.js","sourcesContent":["module.exports = minimatch\nminimatch.Minimatch = Minimatch\n\nvar path = { sep: '/' }\ntry {\n  path = require('path')\n} catch (er) {}\n\nvar GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}\nvar expand = require('brace-expansion')\n\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nvar qmark = '[^/]'\n\n// * => any number of characters\nvar star = qmark + '*?'\n\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nvar twoStarDot = '(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?'\n\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nvar twoStarNoDot = '(?:(?!(?:\\\\\\/|^)\\\\.).)*?'\n\n// characters that need to be escaped in RegExp.\nvar reSpecials = charSet('().*{}+?[]^$\\\\!')\n\n// \"abc\" -> { a:true, b:true, c:true }\nfunction charSet (s) {\n  return s.split('').reduce(function (set, c) {\n    set[c] = true\n    return set\n  }, {})\n}\n\n// normalizes slashes.\nvar slashSplit = /\\/+/\n\nminimatch.filter = filter\nfunction filter (pattern, options) {\n  options = options || {}\n  return function (p, i, list) {\n    return minimatch(p, pattern, options)\n  }\n}\n\nfunction ext (a, b) {\n  a = a || {}\n  b = b || {}\n  var t = {}\n  Object.keys(b).forEach(function (k) {\n    t[k] = b[k]\n  })\n  Object.keys(a).forEach(function (k) {\n    t[k] = a[k]\n  })\n  return t\n}\n\nminimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return minimatch\n\n  var orig = minimatch\n\n  var m = function minimatch (p, pattern, options) {\n    return orig.minimatch(p, pattern, ext(def, options))\n  }\n\n  m.Minimatch = function Minimatch (pattern, options) {\n    return new orig.Minimatch(pattern, ext(def, options))\n  }\n\n  return m\n}\n\nMinimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return Minimatch\n  return minimatch.defaults(def).Minimatch\n}\n\nfunction minimatch (p, pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required')\n  }\n\n  if (!options) options = {}\n\n  // shortcut: comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    return false\n  }\n\n  // \"\" only matches \"\"\n  if (pattern.trim() === '') return p === ''\n\n  return new Minimatch(pattern, options).match(p)\n}\n\nfunction Minimatch (pattern, options) {\n  if (!(this instanceof Minimatch)) {\n    return new Minimatch(pattern, options)\n  }\n\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required')\n  }\n\n  if (!options) options = {}\n  pattern = pattern.trim()\n\n  // windows support: need to use /, not \\\n  if (path.sep !== '/') {\n    pattern = pattern.split(path.sep).join('/')\n  }\n\n  this.options = options\n  this.set = []\n  this.pattern = pattern\n  this.regexp = null\n  this.negate = false\n  this.comment = false\n  this.empty = false\n\n  // make the set of regexps etc.\n  this.make()\n}\n\nMinimatch.prototype.debug = function () {}\n\nMinimatch.prototype.make = make\nfunction make () {\n  // don't do it more than once.\n  if (this._made) return\n\n  var pattern = this.pattern\n  var options = this.options\n\n  // empty patterns and comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    this.comment = true\n    return\n  }\n  if (!pattern) {\n    this.empty = true\n    return\n  }\n\n  // step 1: figure out negation, etc.\n  this.parseNegate()\n\n  // step 2: expand braces\n  var set = this.globSet = this.braceExpand()\n\n  if (options.debug) this.debug = console.error\n\n  this.debug(this.pattern, set)\n\n  // step 3: now we have a set, so turn each one into a series of path-portion\n  // matching patterns.\n  // These will be regexps, except in the case of \"**\", which is\n  // set to the GLOBSTAR object for globstar behavior,\n  // and will not contain any / characters\n  set = this.globParts = set.map(function (s) {\n    return s.split(slashSplit)\n  })\n\n  this.debug(this.pattern, set)\n\n  // glob --> regexps\n  set = set.map(function (s, si, set) {\n    return s.map(this.parse, this)\n  }, this)\n\n  this.debug(this.pattern, set)\n\n  // filter out everything that didn't compile properly.\n  set = set.filter(function (s) {\n    return s.indexOf(false) === -1\n  })\n\n  this.debug(this.pattern, set)\n\n  this.set = set\n}\n\nMinimatch.prototype.parseNegate = parseNegate\nfunction parseNegate () {\n  var pattern = this.pattern\n  var negate = false\n  var options = this.options\n  var negateOffset = 0\n\n  if (options.nonegate) return\n\n  for (var i = 0, l = pattern.length\n    ; i < l && pattern.charAt(i) === '!'\n    ; i++) {\n    negate = !negate\n    negateOffset++\n  }\n\n  if (negateOffset) this.pattern = pattern.substr(negateOffset)\n  this.negate = negate\n}\n\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nminimatch.braceExpand = function (pattern, options) {\n  return braceExpand(pattern, options)\n}\n\nMinimatch.prototype.braceExpand = braceExpand\n\nfunction braceExpand (pattern, options) {\n  if (!options) {\n    if (this instanceof Minimatch) {\n      options = this.options\n    } else {\n      options = {}\n    }\n  }\n\n  pattern = typeof pattern === 'undefined'\n    ? this.pattern : pattern\n\n  if (typeof pattern === 'undefined') {\n    throw new Error('undefined pattern')\n  }\n\n  if (options.nobrace ||\n    !pattern.match(/\\{.*\\}/)) {\n    // shortcut. no need to expand.\n    return [pattern]\n  }\n\n  return expand(pattern)\n}\n\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nMinimatch.prototype.parse = parse\nvar SUBPARSE = {}\nfunction parse (pattern, isSub) {\n  var options = this.options\n\n  // shortcuts\n  if (!options.noglobstar && pattern === '**') return GLOBSTAR\n  if (pattern === '') return ''\n\n  var re = ''\n  var hasMagic = !!options.nocase\n  var escaping = false\n  // ? => one single character\n  var patternListStack = []\n  var plType\n  var stateChar\n  var inClass = false\n  var reClassStart = -1\n  var classStart = -1\n  // . and .. never match anything that doesn't start with .,\n  // even when options.dot is set.\n  var patternStart = pattern.charAt(0) === '.' ? '' // anything\n  // not (start or / followed by . or .. followed by / or end)\n  : options.dot ? '(?!(?:^|\\\\\\/)\\\\.{1,2}(?:$|\\\\\\/))'\n  : '(?!\\\\.)'\n  var self = this\n\n  function clearStateChar () {\n    if (stateChar) {\n      // we had some state-tracking character\n      // that wasn't consumed by this pass.\n      switch (stateChar) {\n        case '*':\n          re += star\n          hasMagic = true\n        break\n        case '?':\n          re += qmark\n          hasMagic = true\n        break\n        default:\n          re += '\\\\' + stateChar\n        break\n      }\n      self.debug('clearStateChar %j %j', stateChar, re)\n      stateChar = false\n    }\n  }\n\n  for (var i = 0, len = pattern.length, c\n    ; (i < len) && (c = pattern.charAt(i))\n    ; i++) {\n    this.debug('%s\\t%s %s %j', pattern, i, re, c)\n\n    // skip over any that are escaped.\n    if (escaping && reSpecials[c]) {\n      re += '\\\\' + c\n      escaping = false\n      continue\n    }\n\n    switch (c) {\n      case '/':\n        // completely not allowed, even escaped.\n        // Should already be path-split by now.\n        return false\n\n      case '\\\\':\n        clearStateChar()\n        escaping = true\n      continue\n\n      // the various stateChar values\n      // for the \"extglob\" stuff.\n      case '?':\n      case '*':\n      case '+':\n      case '@':\n      case '!':\n        this.debug('%s\\t%s %s %j <-- stateChar', pattern, i, re, c)\n\n        // all of those are literals inside a class, except that\n        // the glob [!a] means [^a] in regexp\n        if (inClass) {\n          this.debug('  in class')\n          if (c === '!' && i === classStart + 1) c = '^'\n          re += c\n          continue\n        }\n\n        // if we already have a stateChar, then it means\n        // that there was something like ** or +? in there.\n        // Handle the stateChar, then proceed with this one.\n        self.debug('call clearStateChar %j', stateChar)\n        clearStateChar()\n        stateChar = c\n        // if extglob is disabled, then +(asdf|foo) isn't a thing.\n        // just clear the statechar *now*, rather than even diving into\n        // the patternList stuff.\n        if (options.noext) clearStateChar()\n      continue\n\n      case '(':\n        if (inClass) {\n          re += '('\n          continue\n        }\n\n        if (!stateChar) {\n          re += '\\\\('\n          continue\n        }\n\n        plType = stateChar\n        patternListStack.push({ type: plType, start: i - 1, reStart: re.length })\n        // negation is (?:(?!js)[^/]*)\n        re += stateChar === '!' ? '(?:(?!' : '(?:'\n        this.debug('plType %j %j', stateChar, re)\n        stateChar = false\n      continue\n\n      case ')':\n        if (inClass || !patternListStack.length) {\n          re += '\\\\)'\n          continue\n        }\n\n        clearStateChar()\n        hasMagic = true\n        re += ')'\n        plType = patternListStack.pop().type\n        // negation is (?:(?!js)[^/]*)\n        // The others are (?:<pattern>)<type>\n        switch (plType) {\n          case '!':\n            re += '[^/]*?)'\n            break\n          case '?':\n          case '+':\n          case '*':\n            re += plType\n            break\n          case '@': break // the default anyway\n        }\n      continue\n\n      case '|':\n        if (inClass || !patternListStack.length || escaping) {\n          re += '\\\\|'\n          escaping = false\n          continue\n        }\n\n        clearStateChar()\n        re += '|'\n      continue\n\n      // these are mostly the same in regexp and glob\n      case '[':\n        // swallow any state-tracking char before the [\n        clearStateChar()\n\n        if (inClass) {\n          re += '\\\\' + c\n          continue\n        }\n\n        inClass = true\n        classStart = i\n        reClassStart = re.length\n        re += c\n      continue\n\n      case ']':\n        //  a right bracket shall lose its special\n        //  meaning and represent itself in\n        //  a bracket expression if it occurs\n        //  first in the list.  -- POSIX.2 2.8.3.2\n        if (i === classStart + 1 || !inClass) {\n          re += '\\\\' + c\n          escaping = false\n          continue\n        }\n\n        // handle the case where we left a class open.\n        // \"[z-a]\" is valid, equivalent to \"\\[z-a\\]\"\n        if (inClass) {\n          // split where the last [ was, make sure we don't have\n          // an invalid re. if so, re-walk the contents of the\n          // would-be class to re-translate any characters that\n          // were passed through as-is\n          // TODO: It would probably be faster to determine this\n          // without a try/catch and a new RegExp, but it's tricky\n          // to do safely.  For now, this is safe and works.\n          var cs = pattern.substring(classStart + 1, i)\n          try {\n            RegExp('[' + cs + ']')\n          } catch (er) {\n            // not a valid class!\n            var sp = this.parse(cs, SUBPARSE)\n            re = re.substr(0, reClassStart) + '\\\\[' + sp[0] + '\\\\]'\n            hasMagic = hasMagic || sp[1]\n            inClass = false\n            continue\n          }\n        }\n\n        // finish up the class.\n        hasMagic = true\n        inClass = false\n        re += c\n      continue\n\n      default:\n        // swallow any state char that wasn't consumed\n        clearStateChar()\n\n        if (escaping) {\n          // no need\n          escaping = false\n        } else if (reSpecials[c]\n          && !(c === '^' && inClass)) {\n          re += '\\\\'\n        }\n\n        re += c\n\n    } // switch\n  } // for\n\n  // handle the case where we left a class open.\n  // \"[abc\" is valid, equivalent to \"\\[abc\"\n  if (inClass) {\n    // split where the last [ was, and escape it\n    // this is a huge pita.  We now have to re-walk\n    // the contents of the would-be class to re-translate\n    // any characters that were passed through as-is\n    cs = pattern.substr(classStart + 1)\n    sp = this.parse(cs, SUBPARSE)\n    re = re.substr(0, reClassStart) + '\\\\[' + sp[0]\n    hasMagic = hasMagic || sp[1]\n  }\n\n  // handle the case where we had a +( thing at the *end*\n  // of the pattern.\n  // each pattern list stack adds 3 chars, and we need to go through\n  // and escape any | chars that were passed through as-is for the regexp.\n  // Go through and escape them, taking care not to double-escape any\n  // | chars that were already escaped.\n  for (var pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {\n    var tail = re.slice(pl.reStart + 3)\n    // maybe some even number of \\, then maybe 1 \\, followed by a |\n    tail = tail.replace(/((?:\\\\{2})*)(\\\\?)\\|/g, function (_, $1, $2) {\n      if (!$2) {\n        // the | isn't already escaped, so escape it.\n        $2 = '\\\\'\n      }\n\n      // need to escape all those slashes *again*, without escaping the\n      // one that we need for escaping the | character.  As it works out,\n      // escaping an even number of slashes can be done by simply repeating\n      // it exactly after itself.  That's why this trick works.\n      //\n      // I am sorry that you have to see this.\n      return $1 + $1 + $2 + '|'\n    })\n\n    this.debug('tail=%j\\n   %s', tail, tail)\n    var t = pl.type === '*' ? star\n      : pl.type === '?' ? qmark\n      : '\\\\' + pl.type\n\n    hasMagic = true\n    re = re.slice(0, pl.reStart) + t + '\\\\(' + tail\n  }\n\n  // handle trailing things that only matter at the very end.\n  clearStateChar()\n  if (escaping) {\n    // trailing \\\\\n    re += '\\\\\\\\'\n  }\n\n  // only need to apply the nodot start if the re starts with\n  // something that could conceivably capture a dot\n  var addPatternStart = false\n  switch (re.charAt(0)) {\n    case '.':\n    case '[':\n    case '(': addPatternStart = true\n  }\n\n  // if the re is not \"\" at this point, then we need to make sure\n  // it doesn't match against an empty path part.\n  // Otherwise a/* will match a/, which it should not.\n  if (re !== '' && hasMagic) re = '(?=.)' + re\n\n  if (addPatternStart) re = patternStart + re\n\n  // parsing just a piece of a larger pattern.\n  if (isSub === SUBPARSE) {\n    return [re, hasMagic]\n  }\n\n  // skip the regexp for non-magical patterns\n  // unescape anything in it, though, so that it'll be\n  // an exact match against a file etc.\n  if (!hasMagic) {\n    return globUnescape(pattern)\n  }\n\n  var flags = options.nocase ? 'i' : ''\n  var regExp = new RegExp('^' + re + '$', flags)\n\n  regExp._glob = pattern\n  regExp._src = re\n\n  return regExp\n}\n\nminimatch.makeRe = function (pattern, options) {\n  return new Minimatch(pattern, options || {}).makeRe()\n}\n\nMinimatch.prototype.makeRe = makeRe\nfunction makeRe () {\n  if (this.regexp || this.regexp === false) return this.regexp\n\n  // at this point, this.set is a 2d array of partial\n  // pattern strings, or \"**\".\n  //\n  // It's better to use .match().  This function shouldn't\n  // be used, really, but it's pretty convenient sometimes,\n  // when you just want to work with a regex.\n  var set = this.set\n\n  if (!set.length) {\n    this.regexp = false\n    return this.regexp\n  }\n  var options = this.options\n\n  var twoStar = options.noglobstar ? star\n    : options.dot ? twoStarDot\n    : twoStarNoDot\n  var flags = options.nocase ? 'i' : ''\n\n  var re = set.map(function (pattern) {\n    return pattern.map(function (p) {\n      return (p === GLOBSTAR) ? twoStar\n      : (typeof p === 'string') ? regExpEscape(p)\n      : p._src\n    }).join('\\\\\\/')\n  }).join('|')\n\n  // must match entire pattern\n  // ending in a * or ** will make it less strict.\n  re = '^(?:' + re + ')$'\n\n  // can match anything, as long as it's not this.\n  if (this.negate) re = '^(?!' + re + ').*$'\n\n  try {\n    this.regexp = new RegExp(re, flags)\n  } catch (ex) {\n    this.regexp = false\n  }\n  return this.regexp\n}\n\nminimatch.match = function (list, pattern, options) {\n  options = options || {}\n  var mm = new Minimatch(pattern, options)\n  list = list.filter(function (f) {\n    return mm.match(f)\n  })\n  if (mm.options.nonull && !list.length) {\n    list.push(pattern)\n  }\n  return list\n}\n\nMinimatch.prototype.match = match\nfunction match (f, partial) {\n  this.debug('match', f, this.pattern)\n  // short-circuit in the case of busted things.\n  // comments, etc.\n  if (this.comment) return false\n  if (this.empty) return f === ''\n\n  if (f === '/' && partial) return true\n\n  var options = this.options\n\n  // windows: need to use /, not \\\n  if (path.sep !== '/') {\n    f = f.split(path.sep).join('/')\n  }\n\n  // treat the test path as a set of pathparts.\n  f = f.split(slashSplit)\n  this.debug(this.pattern, 'split', f)\n\n  // just ONE of the pattern sets in this.set needs to match\n  // in order for it to be valid.  If negating, then just one\n  // match means that we have failed.\n  // Either way, return on the first hit.\n\n  var set = this.set\n  this.debug(this.pattern, 'set', set)\n\n  // Find the basename of the path by looking for the last non-empty segment\n  var filename\n  var i\n  for (i = f.length - 1; i >= 0; i--) {\n    filename = f[i]\n    if (filename) break\n  }\n\n  for (i = 0; i < set.length; i++) {\n    var pattern = set[i]\n    var file = f\n    if (options.matchBase && pattern.length === 1) {\n      file = [filename]\n    }\n    var hit = this.matchOne(file, pattern, partial)\n    if (hit) {\n      if (options.flipNegate) return true\n      return !this.negate\n    }\n  }\n\n  // didn't get any hits.  this is success if it's a negative\n  // pattern, failure otherwise.\n  if (options.flipNegate) return false\n  return this.negate\n}\n\n// set partial to true to test if, for example,\n// \"/a/b\" matches the start of \"/*/b/*/d\"\n// Partial means, if you run out of file before you run\n// out of pattern, then that's fine, as long as all\n// the parts match.\nMinimatch.prototype.matchOne = function (file, pattern, partial) {\n  var options = this.options\n\n  this.debug('matchOne',\n    { 'this': this, file: file, pattern: pattern })\n\n  this.debug('matchOne', file.length, pattern.length)\n\n  for (var fi = 0,\n      pi = 0,\n      fl = file.length,\n      pl = pattern.length\n      ; (fi < fl) && (pi < pl)\n      ; fi++, pi++) {\n    this.debug('matchOne loop')\n    var p = pattern[pi]\n    var f = file[fi]\n\n    this.debug(pattern, p, f)\n\n    // should be impossible.\n    // some invalid regexp stuff in the set.\n    if (p === false) return false\n\n    if (p === GLOBSTAR) {\n      this.debug('GLOBSTAR', [pattern, p, f])\n\n      // \"**\"\n      // a/**/b/**/c would match the following:\n      // a/b/x/y/z/c\n      // a/x/y/z/b/c\n      // a/b/x/b/x/c\n      // a/b/c\n      // To do this, take the rest of the pattern after\n      // the **, and see if it would match the file remainder.\n      // If so, return success.\n      // If not, the ** \"swallows\" a segment, and try again.\n      // This is recursively awful.\n      //\n      // a/**/b/**/c matching a/b/x/y/z/c\n      // - a matches a\n      // - doublestar\n      //   - matchOne(b/x/y/z/c, b/**/c)\n      //     - b matches b\n      //     - doublestar\n      //       - matchOne(x/y/z/c, c) -> no\n      //       - matchOne(y/z/c, c) -> no\n      //       - matchOne(z/c, c) -> no\n      //       - matchOne(c, c) yes, hit\n      var fr = fi\n      var pr = pi + 1\n      if (pr === pl) {\n        this.debug('** at the end')\n        // a ** at the end will just swallow the rest.\n        // We have found a match.\n        // however, it will not swallow /.x, unless\n        // options.dot is set.\n        // . and .. are *never* matched by **, for explosively\n        // exponential reasons.\n        for (; fi < fl; fi++) {\n          if (file[fi] === '.' || file[fi] === '..' ||\n            (!options.dot && file[fi].charAt(0) === '.')) return false\n        }\n        return true\n      }\n\n      // ok, let's see if we can swallow whatever we can.\n      while (fr < fl) {\n        var swallowee = file[fr]\n\n        this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee)\n\n        // XXX remove this slice.  Just pass the start index.\n        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n          this.debug('globstar found match!', fr, fl, swallowee)\n          // found a match.\n          return true\n        } else {\n          // can't swallow \".\" or \"..\" ever.\n          // can only swallow \".foo\" when explicitly asked.\n          if (swallowee === '.' || swallowee === '..' ||\n            (!options.dot && swallowee.charAt(0) === '.')) {\n            this.debug('dot detected!', file, fr, pattern, pr)\n            break\n          }\n\n          // ** swallows a segment, and continue.\n          this.debug('globstar swallow a segment, and continue')\n          fr++\n        }\n      }\n\n      // no match was found.\n      // However, in partial mode, we can't say this is necessarily over.\n      // If there's more *pattern* left, then\n      if (partial) {\n        // ran out of file\n        this.debug('\\n>>> no match, partial?', file, fr, pattern, pr)\n        if (fr === fl) return true\n      }\n      return false\n    }\n\n    // something other than **\n    // non-magic patterns just have to match exactly\n    // patterns with magic have been turned into regexps.\n    var hit\n    if (typeof p === 'string') {\n      if (options.nocase) {\n        hit = f.toLowerCase() === p.toLowerCase()\n      } else {\n        hit = f === p\n      }\n      this.debug('string match', p, f, hit)\n    } else {\n      hit = f.match(p)\n      this.debug('pattern match', p, f, hit)\n    }\n\n    if (!hit) return false\n  }\n\n  // Note: ending in / means that we'll get a final \"\"\n  // at the end of the pattern.  This can only match a\n  // corresponding \"\" at the end of the file.\n  // If the file ends in /, then it can only match a\n  // a pattern that ends in /, unless the pattern just\n  // doesn't have any more for it. But, a/b/ should *not*\n  // match \"a/b/*\", even though \"\" matches against the\n  // [^/]*? pattern, except in partial mode, where it might\n  // simply not be reached yet.\n  // However, a/b/ should still satisfy a/*\n\n  // now either we fell off the end of the pattern, or we're done.\n  if (fi === fl && pi === pl) {\n    // ran out of pattern and filename at the same time.\n    // an exact hit!\n    return true\n  } else if (fi === fl) {\n    // ran out of file, but still had pattern left.\n    // this is ok if we're doing the match as part of\n    // a glob fs traversal.\n    return partial\n  } else if (pi === pl) {\n    // ran out of pattern, still have file left.\n    // this is only acceptable if we're on the very last\n    // empty segment of a file with a trailing slash.\n    // a/* should match a/b/\n    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')\n    return emptyFileEnd\n  }\n\n  // should be unreachable.\n  throw new Error('wtf?')\n}\n\n// replace stuff like \\* with *\nfunction globUnescape (s) {\n  return s.replace(/\\\\(.)/g, '$1')\n}\n\nfunction regExpEscape (s) {\n  return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n}\n"]}