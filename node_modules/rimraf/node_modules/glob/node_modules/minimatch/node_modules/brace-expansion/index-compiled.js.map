{"version":3,"sources":["/Users/ashar61/work/projects/drop-box/node_modules/rimraf/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["var concatMap = require('concat-map');\nvar balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction identity(e) {\n  return e;\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m || /\\$$/.test(m.pre)) return [str];\n\n  var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isSequence = isNumericSequence || isAlphaSequence;\n  var isOptions = /^(.*,)+(.+)?$/.test(m.body);\n  if (!isSequence && !isOptions) {\n    // {a},b}\n    if (m.post.match(/,.*}/)) {\n      str = m.pre + '{' + m.body + escClose + m.post;\n      return expand(str);\n    }\n    return [str];\n  }\n\n  var n;\n  if (isSequence) {\n    n = m.body.split(/\\.\\./);\n  } else {\n    n = parseCommaParts(m.body);\n    if (n.length === 1) {\n      // x{{a,b}}y ==> x{a}y x{b}y\n      n = expand(n[0], false).map(embrace);\n      if (n.length === 1) {\n        var post = m.post.length\n          ? expand(m.post, false)\n          : [''];\n        return post.map(function(p) {\n          return m.pre + n[0] + p;\n        });\n      }\n    }\n  }\n\n  // at this point, n is the parts, and we know it's not a comma set\n  // with a single entry.\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  var N;\n\n  if (isSequence) {\n    var x = numeric(n[0]);\n    var y = numeric(n[1]);\n    var width = Math.max(n[0].length, n[1].length)\n    var incr = n.length == 3\n      ? Math.abs(numeric(n[2]))\n      : 1;\n    var test = lte;\n    var reverse = y < x;\n    if (reverse) {\n      incr *= -1;\n      test = gte;\n    }\n    var pad = n.some(isPadded);\n\n    N = [];\n\n    for (var i = x; test(i, y); i += incr) {\n      var c;\n      if (isAlphaSequence) {\n        c = String.fromCharCode(i);\n        if (c === '\\\\')\n          c = '';\n      } else {\n        c = String(i);\n        if (pad) {\n          var need = width - c.length;\n          if (need > 0) {\n            var z = new Array(need + 1).join('0');\n            if (i < 0)\n              c = '-' + z + c.slice(1);\n            else\n              c = z + c;\n          }\n        }\n      }\n      N.push(c);\n    }\n  } else {\n    N = concatMap(n, function(el) { return expand(el, false) });\n  }\n\n  for (var j = 0; j < N.length; j++) {\n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre + N[j] + post[k];\n      if (!isTop || isSequence || expansion)\n        expansions.push(expansion);\n    }\n  }\n\n  return expansions;\n}\n\n"]}